# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ycjJbGFIK4wBCMim9XroDQUSjUU897Cx
"""

import numpy as np

def expected_shortfall(losses, alpha=None, VaR=None):
    """
    Calculate the Expected Shortfall (ES) of losses.

    :param losses: Array of loss values (positive values represent losses)
    :param alpha: Confidence level for VaR calculation (e.g., 0.8 for 80%)
    :param VaR: Predefined Value at Risk threshold
    :return: Expected Shortfall (average of losses exceeding VaR)
    """
    if VaR is None:
        # If VaR is not provided, calculate it using the alpha level
        VaR = np.percentile(losses, 100 * alpha)

    # Calculate ES as the mean of losses exceeding VaR
    es_value = np.mean(losses[losses > VaR])
    return es_value

# Generate random loss data for testing
np.random.seed(42)  # For reproducibility
u = np.random.uniform(0, 100, 100000)